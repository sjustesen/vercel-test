{
  "version": 3,
  "sources": ["../../../../src/server/impl/database_impl.ts"],
  "sourcesContent": ["import {\n  convexToJson,\n  GenericId,\n  jsonToConvex,\n  Value,\n} from \"../../values/index.js\";\nimport { performAsyncSyscall, performSyscall } from \"./syscall.js\";\nimport { DatabaseReader, DatabaseWriter } from \"../database.js\";\nimport { QueryInitializerImpl } from \"./query_impl.js\";\nimport { GenericDataModel, GenericDocument } from \"../data_model.js\";\nimport { validateArg } from \"./validate.js\";\nimport { patchValueToJson } from \"../../values/value.js\";\n\nexport function setupReader(): DatabaseReader<GenericDataModel> {\n  return {\n    get: async (id: GenericId<string>) => {\n      validateArg(id, 1, \"get\", \"id\");\n      if (typeof id !== \"string\") {\n        throw new Error(\n          `Invalid argument \\`id\\` for \\`db.get\\`, expected string but got '${typeof id}': ${\n            id as any\n          }`\n        );\n      }\n      const args = { id: convexToJson(id) };\n      const syscallJSON = await performAsyncSyscall(\"1.0/get\", args);\n      return jsonToConvex(syscallJSON, true) as GenericDocument;\n    },\n    query: (tableName: string) => new QueryInitializerImpl(tableName),\n    normalizeId: <TableName extends string>(\n      tableName: TableName,\n      id: string\n    ): GenericId<TableName> | null => {\n      validateArg(tableName, 1, \"normalizeId\", \"tableName\");\n      validateArg(id, 2, \"normalizeId\", \"id\");\n      const syscallJSON = performSyscall(\"1.0/db/normalizeId\", {\n        table: tableName,\n        idString: id,\n      });\n      const syscallResult = jsonToConvex(syscallJSON, false) as any;\n      return syscallResult.id;\n    },\n  };\n}\n\nexport function setupWriter(): DatabaseWriter<GenericDataModel> {\n  const reader = setupReader();\n  return {\n    get: reader.get,\n    query: reader.query,\n    normalizeId: reader.normalizeId,\n\n    insert: async (table, value) => {\n      validateArg(table, 1, \"insert\", \"table\");\n      validateArg(value, 2, \"insert\", \"value\");\n      const syscallJSON = await performAsyncSyscall(\"1.0/insert\", {\n        table,\n        value: convexToJson(value),\n      });\n      const syscallResult = jsonToConvex(syscallJSON, false) as any;\n      return syscallResult._id;\n    },\n    patch: async (id, value) => {\n      validateArg(id, 1, \"patch\", \"id\");\n      validateArg(value, 2, \"patch\", \"value\");\n      await performAsyncSyscall(\"1.0/shallowMerge\", {\n        id: convexToJson(id),\n        value: patchValueToJson(value as Value),\n      });\n    },\n    replace: async (id, value) => {\n      validateArg(id, 1, \"replace\", \"id\");\n      validateArg(value, 2, \"replace\", \"value\");\n      await performAsyncSyscall(\"1.0/replace\", {\n        id: convexToJson(id),\n        value: convexToJson(value),\n      });\n    },\n    delete: async (id) => {\n      validateArg(id, 1, \"delete\", \"id\");\n      await performAsyncSyscall(\"1.0/remove\", { id: convexToJson(id) });\n    },\n  };\n}\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EAEA;AAAA,OAEK;AACP,SAAS,qBAAqB,sBAAsB;AAEpD,SAAS,4BAA4B;AAErC,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AAE1B,gBAAS,cAAgD;AAC9D,SAAO;AAAA,IACL,KAAK,OAAO,OAA0B;AACpC,kBAAY,IAAI,GAAG,OAAO,IAAI;AAC9B,UAAI,OAAO,OAAO,UAAU;AAC1B,cAAM,IAAI;AAAA,UACR,oEAAoE,OAAO,QACzE;AAAA,QAEJ;AAAA,MACF;AACA,YAAM,OAAO,EAAE,IAAI,aAAa,EAAE,EAAE;AACpC,YAAM,cAAc,MAAM,oBAAoB,WAAW,IAAI;AAC7D,aAAO,aAAa,aAAa,IAAI;AAAA,IACvC;AAAA,IACA,OAAO,CAAC,cAAsB,IAAI,qBAAqB,SAAS;AAAA,IAChE,aAAa,CACX,WACA,OACgC;AAChC,kBAAY,WAAW,GAAG,eAAe,WAAW;AACpD,kBAAY,IAAI,GAAG,eAAe,IAAI;AACtC,YAAM,cAAc,eAAe,sBAAsB;AAAA,QACvD,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC;AACD,YAAM,gBAAgB,aAAa,aAAa,KAAK;AACrD,aAAO,cAAc;AAAA,IACvB;AAAA,EACF;AACF;AAEO,gBAAS,cAAgD;AAC9D,QAAM,SAAS,YAAY;AAC3B,SAAO;AAAA,IACL,KAAK,OAAO;AAAA,IACZ,OAAO,OAAO;AAAA,IACd,aAAa,OAAO;AAAA,IAEpB,QAAQ,OAAO,OAAO,UAAU;AAC9B,kBAAY,OAAO,GAAG,UAAU,OAAO;AACvC,kBAAY,OAAO,GAAG,UAAU,OAAO;AACvC,YAAM,cAAc,MAAM,oBAAoB,cAAc;AAAA,QAC1D;AAAA,QACA,OAAO,aAAa,KAAK;AAAA,MAC3B,CAAC;AACD,YAAM,gBAAgB,aAAa,aAAa,KAAK;AACrD,aAAO,cAAc;AAAA,IACvB;AAAA,IACA,OAAO,OAAO,IAAI,UAAU;AAC1B,kBAAY,IAAI,GAAG,SAAS,IAAI;AAChC,kBAAY,OAAO,GAAG,SAAS,OAAO;AACtC,YAAM,oBAAoB,oBAAoB;AAAA,QAC5C,IAAI,aAAa,EAAE;AAAA,QACnB,OAAO,iBAAiB,KAAc;AAAA,MACxC,CAAC;AAAA,IACH;AAAA,IACA,SAAS,OAAO,IAAI,UAAU;AAC5B,kBAAY,IAAI,GAAG,WAAW,IAAI;AAClC,kBAAY,OAAO,GAAG,WAAW,OAAO;AACxC,YAAM,oBAAoB,eAAe;AAAA,QACvC,IAAI,aAAa,EAAE;AAAA,QACnB,OAAO,aAAa,KAAK;AAAA,MAC3B,CAAC;AAAA,IACH;AAAA,IACA,QAAQ,OAAO,OAAO;AACpB,kBAAY,IAAI,GAAG,UAAU,IAAI;AACjC,YAAM,oBAAoB,cAAc,EAAE,IAAI,aAAa,EAAE,EAAE,CAAC;AAAA,IAClE;AAAA,EACF;AACF;",
  "names": []
}
