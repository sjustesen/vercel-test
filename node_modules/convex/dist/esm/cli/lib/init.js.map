{
  "version": 3,
  "sources": ["../../../../src/cli/lib/init.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport path from \"path\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logWarning,\n  showSpinner,\n} from \"../../bundler/context.js\";\nimport { dashboardUrl } from \"../dashboard.js\";\nimport { DeploymentType, createProjectProvisioningDevOrProd } from \"./api.js\";\nimport { doCodegen, doInitCodegen } from \"./codegen.js\";\nimport {\n  configFilepath,\n  getFunctionsDirectoryPath,\n  pullConfig,\n  upgradeOldAuthInfoToAuthConfig,\n  writeProjectConfig,\n} from \"./config.js\";\nimport { writeDeploymentEnvVar } from \"./deployment.js\";\nimport { writeConvexUrlToEnvFile } from \"./envvars.js\";\nimport {\n  functionsDir,\n  loadPackageJson,\n  logAndHandleAxiosError,\n  validateOrSelectTeam,\n} from \"./utils.js\";\n\nconst cwd = path.basename(process.cwd());\n\nexport async function init(\n  ctx: Context,\n  deploymentType: DeploymentType = \"prod\",\n  config: {\n    team: string | null;\n    project: string | null;\n  }\n) {\n  const configPath = await configFilepath(ctx);\n\n  const { teamSlug: selectedTeam, chosen: didChooseBetweenTeams } =\n    await validateOrSelectTeam(ctx, config.team, \"Team:\");\n\n  let projectName: string = config.project || cwd;\n  if (process.stdin.isTTY && !config.project) {\n    projectName = (\n      await inquirer.prompt([\n        {\n          type: \"input\",\n          name: \"project\",\n          message: \"Project name:\",\n          default: cwd,\n        },\n      ])\n    ).project;\n  }\n\n  showSpinner(ctx, \"Creating new Convex project...\");\n\n  let projectSlug,\n    teamSlug,\n    deploymentName,\n    url,\n    adminKey,\n    projectsRemaining,\n    projectConfig,\n    modules;\n  try {\n    ({\n      projectSlug,\n      teamSlug,\n      deploymentName,\n      url,\n      adminKey,\n      projectsRemaining,\n    } = await createProjectProvisioningDevOrProd(\n      ctx,\n      { teamSlug: selectedTeam, projectName },\n      deploymentType\n    ));\n\n    ({ projectConfig, modules } = await pullConfig(\n      ctx,\n      projectSlug,\n      teamSlug,\n      url,\n      adminKey\n    ));\n  } catch (err) {\n    logFailure(ctx, \"Unable to create project.\");\n    return await logAndHandleAxiosError(ctx, err);\n  }\n\n  const teamMessage = didChooseBetweenTeams\n    ? \" in team \" + chalk.bold(teamSlug)\n    : \"\";\n  logFinishedStep(\n    ctx,\n    `Created project ${chalk.bold(\n      projectSlug\n    )}${teamMessage}, manage it at ${chalk.bold(\n      dashboardUrl(teamSlug, projectSlug, null)\n    )}`\n  );\n\n  if (projectsRemaining <= 2) {\n    logWarning(\n      ctx,\n      chalk.yellow.bold(\n        `Your account now has ${projectsRemaining} project${\n          projectsRemaining === 1 ? \"\" : \"s\"\n        } remaining.`\n      )\n    );\n  }\n\n  if (modules.length > 0) {\n    logFailure(ctx, chalk.red(\"Error: Unexpected modules in new project\"));\n    return await ctx.crash(1, undefined);\n  }\n\n  // create-react-app bans imports from outside of src, so we can just\n  // put the functions directory inside of src/ to work around this issue.\n  const packages = await loadPackageJson(ctx);\n  const isCreateReactApp = \"react-scripts\" in packages;\n  if (isCreateReactApp) {\n    projectConfig.functions = `src/${projectConfig.functions}`;\n  }\n  const functionsPath = functionsDir(configPath, projectConfig);\n\n  const { wroteToGitIgnore } = await writeDeploymentEnvVar(\n    ctx,\n    deploymentType,\n    {\n      team: teamSlug,\n      project: projectSlug,\n      deploymentName,\n    }\n  );\n\n  const projectConfigWithoutAuthInfo = await upgradeOldAuthInfoToAuthConfig(\n    ctx,\n    projectConfig,\n    functionsPath\n  );\n  await writeProjectConfig(ctx, projectConfigWithoutAuthInfo);\n\n  await doInitCodegen({\n    ctx,\n    functionsDirectoryPath: functionsPath,\n    quiet: true,\n  });\n  {\n    const functionsDirectoryPath = await getFunctionsDirectoryPath(ctx);\n    await doCodegen({\n      ctx,\n      functionsDirectoryPath,\n      // Don't typecheck because there isn't any code to check yet.\n      typeCheckMode: \"disable\",\n      quiet: true,\n    });\n  }\n\n  await finalizeConfiguration(\n    ctx,\n    functionsPath,\n    deploymentType,\n    url,\n    wroteToGitIgnore\n  );\n\n  return { deploymentName, adminKey, url };\n}\n\nexport async function finalizeConfiguration(\n  ctx: Context,\n  functionsPath: string,\n  deploymentType: DeploymentType,\n  url: string,\n  wroteToGitIgnore: boolean\n) {\n  const envVarWrite = await writeConvexUrlToEnvFile(ctx, url);\n  if (envVarWrite !== null) {\n    logFinishedStep(\n      ctx,\n      `Provisioned a ${deploymentType} deployment and saved its:\\n` +\n        `    name as CONVEX_DEPLOYMENT to .env.local\\n` +\n        `    URL as ${envVarWrite.envVar} to ${envVarWrite.envFile}`\n    );\n  } else {\n    logFinishedStep(\n      ctx,\n      `Provisioned ${deploymentType} deployment and saved its name as CONVEX_DEPLOYMENT to .env.local`\n    );\n  }\n  if (wroteToGitIgnore) {\n    logMessage(ctx, chalk.gray(`  Added \".env.local\" to .gitignore`));\n  }\n\n  logMessage(\n    ctx,\n    `\\nWrite your Convex functions in ${chalk.bold(functionsPath)}\\n` +\n      \"Give us feedback at https://convex.dev/community or support@convex.dev\\n\"\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
