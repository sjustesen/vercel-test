"use strict";
import * as dotenv from "dotenv";
const ENV_VAR_FILE_PATH = ".env.local";
export const CONVEX_DEPLOYMENT_VAR_NAME = "CONVEX_DEPLOYMENT";
const ENV_VAR_REGEX = new RegExp(`^${CONVEX_DEPLOYMENT_VAR_NAME}.*$`, "m");
export function readDeploymentEnvVar() {
  dotenv.config({ path: ENV_VAR_FILE_PATH });
  dotenv.config();
  const raw = process.env[CONVEX_DEPLOYMENT_VAR_NAME] ?? null;
  if (raw === null) {
    return null;
  }
  return stripDeploymentTypePrefix(raw);
}
export function stripDeploymentTypePrefix(deployment) {
  return deployment.split(":").at(-1);
}
export async function writeDeploymentEnvVar(ctx, deploymentType, deployment) {
  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH) ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH) : null;
  const changedFile = changesToEnvVarFile(
    existingFile,
    deploymentType,
    deployment
  );
  if (changedFile !== null) {
    ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);
    return { wroteToGitIgnore: await gitIgnoreEnvVarFile(ctx) };
  }
  return { wroteToGitIgnore: false };
}
async function gitIgnoreEnvVarFile(ctx) {
  const gitIgnorePath = ".gitignore";
  const gitIgnoreContents = ctx.fs.exists(gitIgnorePath) ? ctx.fs.readUtf8File(gitIgnorePath) : "";
  const changedGitIgnore = changesToGitIgnore(gitIgnoreContents);
  if (changedGitIgnore !== null) {
    ctx.fs.writeUtf8File(gitIgnorePath, changedGitIgnore);
    return true;
  }
  return false;
}
export function changesToEnvVarFile(existingFile, deploymentType, {
  team,
  project,
  deploymentName
}) {
  const deploymentValue = deploymentType + ":" + deploymentName;
  const comment = "# Deployment used by `npx convex dev`";
  const varAssignment = `${CONVEX_DEPLOYMENT_VAR_NAME}=${deploymentValue} # team: ${team}, project: ${project}`;
  if (existingFile === null) {
    return `${comment}
${varAssignment}
`;
  }
  const config = dotenv.parse(existingFile);
  const existing = config[CONVEX_DEPLOYMENT_VAR_NAME];
  if (existing === deploymentValue) {
    return null;
  }
  if (existing !== void 0) {
    return existingFile.replace(ENV_VAR_REGEX, `${varAssignment}`);
  } else {
    return `${existingFile}
${comment}
${varAssignment}
`;
  }
}
export function changesToGitIgnore(existingFile) {
  if (existingFile === null) {
    return `${ENV_VAR_FILE_PATH}
`;
  }
  const gitIgnoreLines = existingFile.split("\n");
  const envVarFileIgnored = gitIgnoreLines.some(
    (line) => line === ".env.local" || line === ".env.*" || line === ".env*" || line === "*.local" || line === ".env*.local"
  );
  if (!envVarFileIgnored) {
    return `${existingFile}
${ENV_VAR_FILE_PATH}
`;
  } else {
    return null;
  }
}
//# sourceMappingURL=deployment.js.map
