"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var convexImport_exports = {};
__export(convexImport_exports, {
  convexImport: () => convexImport
});
module.exports = __toCommonJS(convexImport_exports);
var import_commander = require("commander");
var import_chalk = __toESM(require("chalk"), 1);
var import_utils = require("./lib/utils.js");
var import_version = require("./version.js");
var import_context = require("../bundler/context.js");
var import_api = require("./lib/api.js");
var import_path = __toESM(require("path"), 1);
const convexImport = new import_commander.Command("import").description("Import data from a file into a table").addOption(
  new import_commander.Option(
    "--format <format>",
    "Input file format. This flag is only required if the filename is missing an extension.      CSV files must have a header, and each rows' entries are interpreted either as a (floating point) number or a string.      JSONLines files must have a JSON object per line. JSON files must be an array of JSON objects."
  ).choices(["csv", "jsonLines", "jsonArray"])
).option(
  "--prod",
  "Import data into this project's production deployment. Defaults to your dev deployment without this flag."
).addOption(
  new import_commander.Option("--replace", "Replace any existing data in the table").conflicts(
    "--append"
  )
).addOption(
  new import_commander.Option(
    "--append",
    "Append to any existing data in the table"
  ).conflicts("--replace")
).addOption(new import_commander.Option("--url <url>").hideHelp()).addOption(new import_commander.Option("--admin-key <adminKey>").hideHelp()).argument("<tableName>", "Destination table name").argument("<path>", "Path to the input file").showHelpAfterError().action(async (tableName, filePath, options) => {
  const ctx = import_context.oneoffContext;
  const { adminKey, url: deploymentUrl } = await (0, import_api.fetchDeploymentCredentialsProvisionProd)(ctx, options);
  if (!ctx.fs.exists(filePath)) {
    (0, import_context.logFailure)(ctx, `Error: Path ${import_chalk.default.bold(filePath)} does not exist.`);
    return await ctx.crash(1, "invalid filesystem data");
  }
  const format = await determineFormat(ctx, filePath, options.format ?? null);
  await (0, import_utils.ensureHasConvexDependency)(ctx, "import");
  const data = ctx.fs.createReadStream(filePath);
  const fileStats = ctx.fs.stat(filePath);
  (0, import_context.showSpinner)(ctx, `Importing ${filePath} (${(0, import_utils.formatSize)(fileStats.size)})`);
  const urlName = encodeURIComponent(tableName);
  const urlFormat = encodeURIComponent(format);
  const client = (0, import_utils.deploymentClient)(deploymentUrl);
  let resp;
  let mode = "requireEmpty";
  if (options.append) {
    mode = "append";
  } else if (options.replace) {
    mode = "replace";
  }
  const deploymentNotice = options.prod ? ` in your ${import_chalk.default.bold("prod")} deployment` : "";
  try {
    const url = `/api/import?tableName=${urlName}&format=${urlFormat}&mode=${mode}`;
    resp = await client.post(url, data, {
      headers: {
        Authorization: `Convex ${adminKey}`,
        "Content-Type": "text/plain",
        "Convex-Client": `npm-cli-${import_version.version}`
      }
    });
  } catch (e) {
    (0, import_context.logFailure)(
      ctx,
      `Importing data from ${import_chalk.default.bold(filePath)} to table ${import_chalk.default.bold(
        tableName
      )}${deploymentNotice} failed`
    );
    return await (0, import_utils.logAndHandleAxiosError)(ctx, e);
  }
  (0, import_context.logFinishedStep)(
    ctx,
    `Added ${resp.data.numWritten} documents to table ${import_chalk.default.bold(
      tableName
    )}${deploymentNotice}.`
  );
});
async function determineFormat(ctx, filePath, format) {
  const fileExtension = import_path.default.extname(filePath);
  if (fileExtension !== "") {
    const formatToExtension = {
      csv: ".csv",
      jsonLines: ".jsonl",
      jsonArray: ".json"
    };
    const extensionToFormat = Object.fromEntries(
      Object.entries(formatToExtension).map((a) => a.reverse())
    );
    if (format !== null && fileExtension !== formatToExtension[format]) {
      (0, import_context.logWarning)(
        ctx,
        import_chalk.default.yellow(
          `Warning: Extension of file ${filePath} (${fileExtension}) does not match specified format: ${format} (${formatToExtension[format]}).`
        )
      );
    }
    format ?? (format = extensionToFormat[fileExtension]);
  }
  if (format === null) {
    (0, import_context.logFailure)(
      ctx,
      "No input file format inferred by the filename extension or specified. Specify your input file's format using the `--format` flag."
    );
    return await ctx.crash(1, "fatal");
  }
  return format;
}
//# sourceMappingURL=convexImport.js.map
